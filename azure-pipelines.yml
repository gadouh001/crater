# PHP
# Test and package your PHP project.
# Add steps that run tests, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  phpVersion: 8.1

steps:
- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Use PHP version $(phpVersion)'

- script: |
    composer update --no-interaction --prefer-dist
    composer install --no-interaction --prefer-dist
  displayName: 'composer install'

# --- DÉBUT DES ÉTAPES D'ANALYSE SAST ---

- script: |
    # S'assure que le répertoire des binaires de Composer global est dans la PATH pour les commandes suivantes
    export PATH="$HOME/.composer/vendor/bin:$PATH"
    composer global require "squizlabs/php_codesniffer=*"
    # J'ai retiré 'phpcs -v' de cette étape pour éviter le déclenchement prématuré de l'erreur
  displayName: 'Install PHP_CodeSniffer'

- script: |
    # S'assure que la PATH est définie pour ce script aussi
    export PATH="$HOME/.composer/vendor/bin:$PATH"
    # Clone les règles de sécurité de PHPCS-Security-Audit dans le répertoire de travail du pipeline
    git clone https://github.com/FloeDesignToCode/phpcs-security-audit.git $(System.DefaultWorkingDirectory)/phpcs-security-audit
    # Configure PHPCS pour utiliser ces règles
    phpcs --config-set installed_paths $(System.DefaultWorkingDirectory)/phpcs-security-audit
    phpcs -i # Ceci listera les standards installés, et ne devrait pas déclencher une analyse
  displayName: 'Clone PHPCS Security Audit rules'

# --- ÉTAPE DE DÉBOGAGE CRUCIALE ---
- script: |
    echo "Listing contents of the working directory ($(System.DefaultWorkingDirectory)) for SAST scan:"
    ls -lR $(System.DefaultWorkingDirectory)
    echo "Searching for PHP files in ($(System.DefaultWorkingDirectory)):"
    find $(System.DefaultWorkingDirectory) -name "*.php"
  displayName: 'Debug PHP Files Location'
# --- FIN DE L'ÉTAPE DE DÉBOGAGE ---

- script: |
    # S'assure que la PATH est définie pour ce script aussi
    export PATH="$HOME/.composer/vendor/bin:$PATH"
    # Exécute le scan SAST. Le '.' fait référence au 'workingDirectory' de cette tâche.
    phpcs --standard=Security --report=full --report-xml=phpcs-security-report.xml .
  displayName: 'Run PHP SAST Scan (PHP_CodeSniffer)'
  workingDirectory: '$(System.DefaultWorkingDirectory)' # C'est la racine de votre dépôt après le checkout
  continueOnError: true # Le pipeline continuera même si des vulnérabilités sont trouvées

- task: PublishBuildArtifacts@1
  displayName: 'Publish SAST Report'
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/phpcs-security-report.xml' # Chemin du rapport généré
    artifactName: 'SAST Reports'
    publishLocation: 'Container' # Publie le rapport en tant qu'artefact du build

# --- FIN DES ÉTAPES D'ANALYSE SAST ---